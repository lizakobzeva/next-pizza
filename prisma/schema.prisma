generator client{
    provider = "prisma-client-js"
}

datasource db{
    provider = "postgresql"
    url = env("DATABASE_URL")
}

model User{
    id  Int @id @default(autoincrement())

    fullName String 
    email    String @unique
    password String
    role UserRole @default(USER)
    verified Boolean @default(true)

    provider String?
    providerId String?

    cart Cart?
    orders Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category{
    id Int @id @default(autoincrement())

    name String @unique

    products Product[]
}

model Product{
    id Int @id @default(autoincrement())

    name String
    imageUrl String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    categoryid Int
    category Category  @relation(fields: [categoryid], references: [id])

    ingredients Ingredient[]

    items ProductItem[]
}

model ProductItem{
    id Int @id @default(autoincrement())

    price Int
    size Int?
    pizzaType Int?

    product Product @relation(fields: [productid], references: [id])
    productid Int

    CartItem CartItem[]
}

model Ingredient{
    id Int @id @default(autoincrement())

    name String
    price Int
    imageUrl String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    products Product[]
    cartItem CartItem[]
}

model Cart{
    id Int @id @default(autoincrement())

    totalAmount Int @default(0)
    token String?

    user User? @relation(fields: [userid], references: [id])
    userid Int? @unique
    items CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem{
    id Int @id @default(autoincrement())

    quantity Int @default(1)
    // pizzaSize Int?
    // pizzaType Int?
    
    cart Cart @relation(fields: [cartId], references: [id])
    cartId Int

    productItem ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order{
    id Int @id @default(autoincrement())
    
    user User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status OrderStatus
    paymentId String?

    items Json

    fullName String
    email String
    phone String
    address String
    comment String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode{
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id])
    userId Int @unique

    code String

    createdAt DateTime @default(now())
}

enum OrderStatus{
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole{
    USER
    ADMIN
}